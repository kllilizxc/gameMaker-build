{"scriptsMap":{"MTg2MWIxOTU=YmI0ODdmNjY=NjIxODk2YWM=NThjMDE2ZGY=":{"directionalLight":{"sort":0,"values":{}},"transform":{"sort":1,"values":{}},"shadowGenerator":{"sort":2,"values":{}}},"MTcwMzQ3YjM=Mzg5NzliZmI=ZDVmNmRiZTc=ZGQzOWUyZDk=":{"transform":{"sort":0,"values":{"position":{"x":0,"y":-0.5,"z":0},"scaling":{"x":0.2,"y":0.2,"z":0.2}}},"groundGeometry":{"sort":1,"values":{}},"physics":{"sort":2,"values":{"mass":0}},"standardMaterial":{"sort":3,"values":{"diffuseColor":{"r":0.4,"b":0.8,"g":0.6}}}},"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y=":{"transform":{"sort":0,"values":{}},"sphereGeometry":{"sort":1,"values":{}},"physics":{"sort":2,"values":{}},"playerController":{"sort":3,"values":{}},"standardMaterial":{"sort":4,"values":{"diffuseColor":{"b":0.4}}}},"ODAxMTFiMmQ=OGEzNTZkMTE=MjkwYzA0MQ==ZWM0NDQ0ZDk=":{"universalCamera":{"sort":0,"values":{}},"transform":{"sort":1,"values":{"position":{"y":7,"z":-7},"rotation":{"x":45,"y":0,"z":0}}},"cameraController":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"YjIwNzUyYTM=YTllYmM1NTM=Y2U3OWYxMg==MDRmZGExNDk=":{"transform":{"sort":0,"values":{"scaling":{"y":1,"z":20,"x":0.5},"position":{"x":10}}},"boxGeometry":{"sort":1,"values":{}},"environmentMaterial":{"sort":3,"values":{"diffuseColor":{"r":0.4,"b":0.8,"g":0.6}}},"physics":{"sort":4,"values":{"mass":0}}},"MmJmODkzYTI=NjAxNmU0YTY=NzJiODk3MmM0YmI1YTQ=":{"transform":{"sort":0,"values":{"scaling":{"y":1,"z":20,"x":0.5},"position":{"x":-10,"y":0,"z":0}}},"boxGeometry":{"sort":1,"values":{}},"environmentMaterial":{"sort":3,"values":{"diffuseColor":{"r":0.4,"b":0.8,"g":0.6}}},"physics":{"sort":4,"values":{"mass":0}}},"ZGJhMzQwN2I=YWI2YzI3MDY=M2U1ZmRjNjc=OWUzYzExMjU=":{"transform":{"sort":0,"values":{"scaling":{"y":1,"z":20,"x":0.5},"position":{"x":0,"y":0,"z":10},"rotation":{"y":90}}},"boxGeometry":{"sort":1,"values":{}},"environmentMaterial":{"sort":3,"values":{"diffuseColor":{"r":0.4,"b":0.8,"g":0.6}}},"physics":{"sort":4,"values":{"mass":0}}},"ZGY3ZGUzNzk=YzkyYTAzNjk=MWQ5ZWU4ZTQ=YmEwNjUzZTc=":{"transform":{"sort":0,"values":{"scaling":{"y":1,"z":20,"x":0.5},"position":{"x":0,"y":0,"z":-10},"rotation":{"y":90}}},"boxGeometry":{"sort":1,"values":{}},"environmentMaterial":{"sort":3,"values":{"diffuseColor":{"r":0.4,"b":0.8,"g":0.6}}},"physics":{"sort":4,"values":{"mass":0}}},"M2E0NGUwNzY=OGUyZGUyZTM=ZTY4NGM5ZTE=NjJlYmQyZWM=":{"transform":{"sort":0,"values":{"position":{"x":0,"y":0.25,"z":4},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"NDMwOTdkMDc=MmY3MWJhODk=NGU3NmI0OTY=Y2UzZWM2MzM=":{"transform":{"sort":0,"values":{"position":{"x":2.2,"y":0.25,"z":3.8},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"ZWYyZDYwZGM=NGFjN2NiZjQ=YWIxYWQyY2E=MzkwYWRlMQ==":{"transform":{"sort":0,"values":{}}},"NWViYTYyYmY=ZWVmZDNhOGQ=MGI0OWRjZjI=ZTdhMWViYzI=":{"transform":{"sort":0,"values":{"position":{"x":3.8,"y":0.25,"z":2.2},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"ZjE0YjYzYjM=ZGU5NzJlY2M=ZmY3MGMxY2Y=MDY1YWYxNg==":{"transform":{"sort":0,"values":{"position":{"x":4,"y":0.25,"z":0},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"ZjE1ZjAzN2E=MDdhMDQ2OTE=NmFkOTI4ZjQ=YTAzZDViYTc=":{"transform":{"sort":0,"values":{"position":{"x":3.8,"y":0.25,"z":-2.2},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"YzUzYTQwMDY=NjI5OGNhZWE=NzgzNGYzY2Q=ZWU2N2U4OTM=":{"transform":{"sort":0,"values":{"position":{"x":2.2,"y":0.25,"z":-3.8},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"NDYxZjE2MGQ=ZmFmYzliNjk=ZGJlYTIzMDg=OGQ3Y2Y1NjM=":{"transform":{"sort":0,"values":{"position":{"x":0,"y":0.25,"z":-4},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"ZmYwNjM0Mjk=NTdlMjIyMmI=NWU1MGM0MDU=OGZhZTNkN2Q=":{"transform":{"sort":0,"values":{"position":{"x":-2.2,"y":0.25,"z":-3.8},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"NWMyMjRhM2U=OTcwN2QxOGE=NTY2MzQzODQ=MGQwYjg0YTI=":{"transform":{"sort":0,"values":{"position":{"x":-3.8,"y":0.25,"z":-2.2},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"YWY0YjUyZjQ=Y2QzZjExY2I=ZTk0YWExZTc=NjE3OWI2MzU=":{"transform":{"sort":0,"values":{"position":{"x":-4,"y":0.25,"z":0},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"NGMxYjk3YzY=Y2E5ZTc0OGQ=OTQ3OWIxZDc=Y2EwOWMzMzQ=":{"transform":{"sort":0,"values":{"position":{"x":-3.8,"y":0.25,"z":2.2},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}},"M2JjZWEyYmU=NzUzOWIxZjk=YTU0ODJkNDQ=YTgwMzEyMTc=":{"transform":{"sort":0,"values":{"position":{"x":-2.2,"y":0.25,"z":3.8},"rotation":{"x":45,"y":45,"z":45},"scaling":{"x":0.5,"y":0.5,"z":0.5}}},"boxGeometry":{"sort":1,"values":{}},"rotator":{"sort":2,"values":{"player":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y="}}}},"filesMap":{"directionalLight.js":"const directionalLight = new BABYLON.DirectionalLight(this.name, new BABYLON.Vector3(20, -15, 30), scene)\nthis.setMesh(directionalLight)\nthis.getLight = () => directionalLight\n\nfields = {\n    diffuse: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => directionalLight.diffuse.r,\n                set: val => directionalLight.diffuse.r = val\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => directionalLight.diffuse.g,\n                set: val => directionalLight.diffuse.g = val\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => directionalLight.diffuse.b,\n                set: val => directionalLight.diffuse.b = val\n            }\n        }\n    },\n    direction: {\n        type: 'GROUP',\n        children: {\n            x: {\n                type: 'NUMBER',\n                get: () => directionalLight.direction.x,\n                set: val => directionalLight.direction.x = val\n            },\n            y: {\n                type: 'NUMBER',\n                get: () => directionalLight.direction.y,\n                set: val => directionalLight.direction.y = val\n            },\n            z: {\n                type: 'NUMBER',\n                get: () => directionalLight.direction.z,\n                set: val => directionalLight.direction.z = val\n            }\n        }\n    },\n    intensity: {\n        type: 'NUMBER',\n        get: () => directionalLight.intensity,\n        set: val => directionalLight.intensity = val\n    }\n}\n","transform.js":"fields = {}\n\nif (this.getMesh().position)\n    fields.position = {\n        type: 'GROUP',\n        children: {\n            x: {\n                type: 'NUMBER',\n                get: () => this.getMesh().position.x,\n                set: val => this.getMesh().position.x = val\n            },\n            y: {\n                type: 'NUMBER',\n                get: () => this.getMesh().position.y,\n                set: val => this.getMesh().position.y = val\n            },\n            z: {\n                type: 'NUMBER',\n                get: () => this.getMesh().position.z,\n                set: val => this.getMesh().position.z = val\n            }\n        }\n    }\n\nif (this.getMesh().rotation)\n    fields.rotation = {\n        type: 'GROUP',\n        children: {\n            x: {\n                type: 'NUMBER',\n                get: () => BABYLON.Tools.ToDegrees(this.getMesh().rotation.x),\n                set: val => this.getMesh().rotation.x = BABYLON.Tools.ToRadians(val)\n            },\n            y: {\n                type: 'NUMBER',\n                get: () => BABYLON.Tools.ToDegrees(this.getMesh().rotation.y),\n                set: val => this.getMesh().rotation.y = BABYLON.Tools.ToRadians(val)\n            },\n            z: {\n                type: 'NUMBER',\n                get: () => BABYLON.Tools.ToDegrees(this.getMesh().rotation.z),\n                set: val => this.getMesh().rotation.z = BABYLON.Tools.ToRadians(val)\n            }\n        }\n    }\n\nif (this.getMesh().scaling)\n    fields.scaling = {\n        type: 'GROUP',\n        children: {\n            x: {\n                type: 'NUMBER',\n                get: () => this.getMesh().scaling.x,\n                set: val => this.getMesh().scaling.x = val\n            },\n            y: {\n                type: 'NUMBER',\n                get: () => this.getMesh().scaling.y,\n                set: val => this.getMesh().scaling.y = val\n            },\n            z: {\n                type: 'NUMBER',\n                get: () => this.getMesh().scaling.z,\n                set: val => this.getMesh().scaling.z = val\n            }\n        }\n    }\n\nactions = {\n    setScaling: (x, y, z) => {\n        fields.scaling.children.x.set(x)\n        fields.scaling.children.y.set(y)\n        fields.scaling.children.z.set(z)\n    },\n    setTranslation(x, y, z) {\n        const { position } = this.getMesh()\n        position.x = x\n        position.y = y\n        position.z = z\n    },\n    setRotation: (x, y, z) => {\n        const { rotation } = this.getMesh()\n        rotation.x = x\n        rotation.y = y\n        rotation.z = z\n    }\n}\n","shadowGenerator.js":"let shadowMapSize = 8192\nlet shadowGenerator\nconst setShadowMapSize = () => {\n    shadowGenerator = new BABYLON.ShadowGenerator(shadowMapSize, this.getMesh())\n    scene.meshes.forEach(mesh => shadowGenerator.addShadowCaster(mesh, true))\n}\nsetShadowMapSize()\n\nfields = {\n    shadowMapSize: {\n        type: 'NUMBER',\n        get: () => shadowMapSize,\n        set: val => {\n            if (val % 16 !== 0) return\n            shadowMapSize = val\n            setShadowMapSize()\n        }\n    },\n    poissonSampling: {\n        type: 'BOOLEAN',\n        get: () => shadowGenerator.usePoissonSampling,\n        set: val => shadowGenerator.usePoissonSampling = val\n    },\n    exponential: {\n        type: 'BOOLEAN',\n        get: () => shadowGenerator.useExponentialShadowMap,\n        set: val => shadowGenerator.useExponentialShadowMap = val\n    },\n    blurExponential: {\n        type: 'BOOLEAN',\n        get: () => shadowGenerator.useBlurExponentialShadowMap,\n        set: val => shadowGenerator.useBlurExponentialShadowMap = val\n    },\n    blurKernel: {\n        type: 'NUMBER',\n        get: () => shadowGenerator.blurKernel,\n        set: val => shadowGenerator.blurKernel = val\n    },\n    closeExponential: {\n        type: 'BOOLEAN',\n        get: () => shadowGenerator.useCloseExponentialShadowMap,\n        set: val => shadowGenerator.useCloseExponentialShadowMap\n    },\n    blurCloseExponential: {\n        type: 'BOOLEAN',\n        get: () => shadowGenerator.useCloseExponentialShadowMap,\n        set: val => shadowGenerator.useCloseExponentialShadowMap = val\n    }\n}\n","groundGeometry.js":"let width = 100, height = 100\nconst setGeometry = () => {\n    const vertexData = BABYLON.VertexData.CreateGround({ width, height })\n    vertexData.applyToMesh(this.getMesh(), true)\n}\nsetGeometry()\n","sphereGeometry.js":"const vertexData = BABYLON.VertexData.CreateSphere(1)\nvertexData.applyToMesh(this.getMesh(), true)\n","physics.js":"let mass = 1\r\nlet restitution = 0\r\nlet friction = 0\r\nlet type = 'BoxImpostor'\r\nlet checkCollisions = true\r\n\r\nfields = {\r\n    type: {\r\n        type: 'ENUM',\r\n        get: () => type,\r\n        set: val => type = val,\r\n        options: { options: ['BoxImpostor', 'SphereImpostor'] }\r\n    },\r\n    checkCollisions: {\r\n        type: 'BOOLEAN',\r\n        get: () => checkCollisions,\r\n        set: val => checkCollisions = val\r\n    },\r\n    mass: {\r\n        type: 'NUMBER',\r\n        get: () => mass,\r\n        set: val => mass = val\r\n    },\r\n    friction: {\r\n        name: 'friction',\r\n        type: 'NUMBER',\r\n        get: () => friction,\r\n        set: val => friction = val\r\n    },\r\n    restitution: {\r\n        type: 'NUMBER',\r\n        get: () => restitution,\r\n        set: val => restitution = val\r\n    }\r\n}\r\n\r\nactions = {\r\n    applyForce: force => {\r\n        if (!this.physicsImpostor) return\r\n        this.physicsImpostor.applyForce(force, this.getMesh().getAbsolutePosition())\r\n    },\r\n    setLinearVelocity: velocity => {\r\n        if (!this.physicsImpostor) return\r\n        this.physicsImpostor.setLinearVelocity(velocity)\r\n    }\r\n}\r\n\r\nfunction init() {\r\n    this.checkCollisions = checkCollisions\r\n    this.physicsImpostor =\r\n        new BABYLON.PhysicsImpostor(this.getMesh(), BABYLON.PhysicsImpostor[type], { mass, friction, restitution }, scene)\r\n}\r\n\r\nfunction update() {\r\n}\r\n","playerController.js":"let speed = 10\n\nfields = {\n    speed: {\n        type: 'NUMBER',\n        get: () => speed,\n        set: val => speed = val\n    }\n}\n\nfunction update() {\n    let moveHorizontal = scene.pointerX\n    let moveVertical = scene.pointerY\n\n    let movement = new BABYLON.Vector3((moveHorizontal / scene.canvas.clientWidth) * 2 - 1, 0, 1 - (moveVertical / scene.canvas.clientHeight) * 2)\n    this.physics.applyForce(movement.scale(speed))\n}\n","universalCamera.js":"// Parameters : name, position, scene\r\nconst universalCamera = new BABYLON.UniversalCamera(this.getMesh().name, new BABYLON.Vector3(0, -5, -20), scene)\r\nthis.setMesh(universalCamera)\r\nconst editCamera = scene.activeCamera\r\nlet allowControl = true\r\n\r\n// Targets the universalCamera to a particular position. In this case the scene origin\r\nuniversalCamera.setTarget(BABYLON.Vector3.Zero())\r\nuniversalCamera.attachControl(scene.canvas)\r\n\r\nfunction init() {\r\n    scene.activeCamera = universalCamera\r\n}\r\n\r\nfunction onFocus() {\r\n    scene.activeCamera = universalCamera\r\n}\r\n\r\nfunction onBlur() {\r\n    scene.activeCamera = editCamera\r\n}\r\n","cameraController.js":"let player\nlet offset\n\nfields = {\n    player: {\n        type: 'GAMEOBJECT',\n        get: () => player,\n        set: val => player = val\n    }\n}\n\nfunction init() {\n    if (!player) return\n    offset = this.getMesh().position.subtract(player.getMesh().position)\n}\n\nfunction update() {\n    if (!player) return\n    this.getMesh().position = player.getMesh().position.add(offset)\n}\n","boxGeometry.js":"let width = 1, height = 1, depth = 1\nconst setGeometry = () => {\n    const vertexData = BABYLON.VertexData.CreateBox({ width, height, depth })\n    vertexData.applyToMesh(this.getMesh(), true)\n}\nsetGeometry()\n\nfields = {\n    size: {\n        type: 'GROUP',\n        children: {\n            width: {\n                type: 'NUMBER',\n                get: () => width,\n                set: val => {\n                    width = val\n                    setGeometry()\n                }\n            },\n            height: {\n                type: 'NUMBER',\n                get: () => height,\n                set: val => {\n                    height = val\n                    setGeometry()\n                }\n            },\n            depth: {\n                type: 'NUMBER',\n                get: () => depth,\n                set: val => {\n                    depth = val\n                    setGeometry()\n                }\n            }\n        }\n    }\n}\n","standardMaterial.js":"const standardMaterial = new BABYLON.StandardMaterial('standardMaterial', scene)\nthis.getMesh().material = standardMaterial\nthis.getMesh().receiveShadows = true\nlet diffuseTexture, specularTexture, emissiveTexture, ambientTexture, bumpTexture\n\nfields = {\n    diffuseColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.r,\n                set: val => standardMaterial.diffuseColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.g,\n                set: val => standardMaterial.diffuseColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.b,\n                set: val => standardMaterial.diffuseColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    diffuseTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => diffuseTexture,\n                set: val => val && (standardMaterial.diffuseTexture = new BABYLON.Texture((diffuseTexture = val).data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.diffuseTexture && standardMaterial.diffuseTexture.hasAlpha,\n                set: val => standardMaterial.diffuseTexture && (standardMaterial.diffuseTexture.hasAlpha = val)\n            }\n        }\n    },\n    specularColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.r,\n                set: val => standardMaterial.specularColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.g,\n                set: val => standardMaterial.specularColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.b,\n                set: val => standardMaterial.specularColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    specularTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => specularTexture,\n                set: val => val && (standardMaterial.specularTexture = new BABYLON.Texture(specularTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.specularTexture && standardMaterial.specularTexture.hasAlpha,\n                set: val => standardMaterial.specularTexture && (standardMaterial.specularTexture.hasAlpha = val)\n            }\n        }\n    },\n    emissiveColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.r,\n                set: val => standardMaterial.emissiveColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.g,\n                set: val => standardMaterial.emissiveColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.b,\n                set: val => standardMaterial.emissiveColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    emissiveTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => emissiveTexture,\n                set: val => val && (standardMaterial.emissiveTexture = new BABYLON.Texture(emissiveTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.emissiveTexture && standardMaterial.emissiveTexture.hasAlpha,\n                set: val => standardMaterial.emissiveTexture && (standardMaterial.emissiveTexture.hasAlpha = val)\n            }\n        }\n    },\n    ambientColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.r,\n                set: val => standardMaterial.ambientColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.g,\n                set: val => standardMaterial.ambientColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.b,\n                set: val => standardMaterial.ambientColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    ambientTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => ambientTexture,\n                set: val => val && (standardMaterial.ambientTexture = new BABYLON.Texture(ambientTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.ambientTexture && standardMaterial.ambientTexture.hasAlpha,\n                set: val => standardMaterial.ambientTexture && (standardMaterial.ambientTexture.hasAlpha = val)\n            }\n        }\n    },\n    bumpTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => bumpTexture,\n                set: val => val && (standardMaterial.bumpTexture = new BABYLON.Texture(bumpTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.bumpTexture && standardMaterial.bumpTexture.hasAlpha,\n                set: val => standardMaterial.bumpTexture && (standardMaterial.bumpTexture.hasAlpha = val)\n            }\n        }\n    },\n    alpha: {\n        type: 'NUMBER',\n        get: () => standardMaterial.alpha,\n        set: val => standardMaterial.alpha = val,\n        options: { max: 1, min: 0, step: 0.1 }\n    },\n    backFaceCulling: {\n        type: 'BOOLEAN',\n        get: () => standardMaterial.backFaceCulling,\n        set: val => standardMaterial.backFaceCulling = val\n    },\n    wireframe: {\n        type: 'BOOLEAN',\n        get: () => standardMaterial.wireframe,\n        set: val => standardMaterial.wireframe = val\n    }\n}\n","environmentMaterial.temp":"{\"scriptMap\":{\"sort\":3,\"values\":{\"diffuseColor\":{\"r\":0.4,\"b\":0.8,\"g\":0.6}}},\"src\":\"standardMaterial\"}","environmentMaterial.js":"const standardMaterial = new BABYLON.StandardMaterial('standardMaterial', scene)\nthis.getMesh().material = standardMaterial\nthis.getMesh().receiveShadows = true\nlet diffuseTexture, specularTexture, emissiveTexture, ambientTexture, bumpTexture\n\nfields = {\n    diffuseColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.r,\n                set: val => standardMaterial.diffuseColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.g,\n                set: val => standardMaterial.diffuseColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.diffuseColor.b,\n                set: val => standardMaterial.diffuseColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    diffuseTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => diffuseTexture,\n                set: val => val && (standardMaterial.diffuseTexture = new BABYLON.Texture((diffuseTexture = val).data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.diffuseTexture && standardMaterial.diffuseTexture.hasAlpha,\n                set: val => standardMaterial.diffuseTexture && (standardMaterial.diffuseTexture.hasAlpha = val)\n            }\n        }\n    },\n    specularColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.r,\n                set: val => standardMaterial.specularColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.g,\n                set: val => standardMaterial.specularColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.specularColor.b,\n                set: val => standardMaterial.specularColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    specularTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => specularTexture,\n                set: val => val && (standardMaterial.specularTexture = new BABYLON.Texture(specularTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.specularTexture && standardMaterial.specularTexture.hasAlpha,\n                set: val => standardMaterial.specularTexture && (standardMaterial.specularTexture.hasAlpha = val)\n            }\n        }\n    },\n    emissiveColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.r,\n                set: val => standardMaterial.emissiveColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.g,\n                set: val => standardMaterial.emissiveColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.emissiveColor.b,\n                set: val => standardMaterial.emissiveColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    emissiveTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => emissiveTexture,\n                set: val => val && (standardMaterial.emissiveTexture = new BABYLON.Texture(emissiveTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.emissiveTexture && standardMaterial.emissiveTexture.hasAlpha,\n                set: val => standardMaterial.emissiveTexture && (standardMaterial.emissiveTexture.hasAlpha = val)\n            }\n        }\n    },\n    ambientColor: {\n        type: 'GROUP',\n        children: {\n            r: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.r,\n                set: val => standardMaterial.ambientColor.r = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            g: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.g,\n                set: val => standardMaterial.ambientColor.g = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            },\n            b: {\n                type: 'NUMBER',\n                get: () => standardMaterial.ambientColor.b,\n                set: val => standardMaterial.ambientColor.b = val,\n                options: { max: 1, min: 0, step: 0.1 }\n            }\n        }\n    },\n    ambientTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => ambientTexture,\n                set: val => val && (standardMaterial.ambientTexture = new BABYLON.Texture(ambientTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.ambientTexture && standardMaterial.ambientTexture.hasAlpha,\n                set: val => standardMaterial.ambientTexture && (standardMaterial.ambientTexture.hasAlpha = val)\n            }\n        }\n    },\n    bumpTexture: {\n        type: 'GROUP',\n        children: {\n            texture: {\n                type: 'FILE',\n                get: () => bumpTexture,\n                set: val => val && (standardMaterial.bumpTexture = new BABYLON.Texture(bumpTexture = val.data, scene))\n            },\n            hasAlpha: {\n                type: 'BOOLEAN',\n                get: () => standardMaterial.bumpTexture && standardMaterial.bumpTexture.hasAlpha,\n                set: val => standardMaterial.bumpTexture && (standardMaterial.bumpTexture.hasAlpha = val)\n            }\n        }\n    },\n    alpha: {\n        type: 'NUMBER',\n        get: () => standardMaterial.alpha,\n        set: val => standardMaterial.alpha = val,\n        options: { max: 1, min: 0, step: 0.1 }\n    },\n    backFaceCulling: {\n        type: 'BOOLEAN',\n        get: () => standardMaterial.backFaceCulling,\n        set: val => standardMaterial.backFaceCulling = val\n    },\n    wireframe: {\n        type: 'BOOLEAN',\n        get: () => standardMaterial.wireframe,\n        set: val => standardMaterial.wireframe = val\n    }\n}\n","rotator.js":"let time, deltaTime, player\n\nfields = {\n    player: {\n        type: 'GAMEOBJECT',\n        get: () => player,\n        set: val => player = val\n    }\n}\n\nfunction init() {\n    time = Date.now()\n    deltaTime = 0\n}\n\nfunction update() {\n    deltaTime = Date.now() - time\n    time = Date.now()\n    this.getMesh().rotate(new BABYLON.Vector3(15, 30, 45), deltaTime / 1000)\n    if (player && this.getMesh().intersectsMesh(player.getMesh())) {\n        this.getMesh().isVisible = false\n        setTimeout(() => this.getMesh().isVisible = true, 3000)\n    }\n}\n","rotator.pref":"{\n\t\"transform\": {\n\t\t\"sort\": 0,\n\t\t\"values\": {\n\t\t\t\"position\": {\n\t\t\t\t\"x\": 0,\n\t\t\t\t\"y\": 0.25,\n\t\t\t\t\"z\": 4\n\t\t\t},\n\t\t\t\"rotation\": {\n\t\t\t\t\"x\": 45,\n\t\t\t\t\"y\": 45,\n\t\t\t\t\"z\": 45\n\t\t\t},\n\t\t\t\"scaling\": {\n\t\t\t\t\"x\": 0.5,\n\t\t\t\t\"y\": 0.5,\n\t\t\t\t\"z\": 0.5\n\t\t\t}\n\t\t}\n\t},\n\t\"boxGeometry\": {\n\t\t\"sort\": 1,\n\t\t\"values\": {}\n\t},\n\t\"rotator\": {\n\t\t\"sort\": 2,\n\t\t\"values\": {\n\t\t\t\"player\": \"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y=\"\n\t\t}\n\t}\n}"},"assets":{"models":[],"textures":[],"scripts":["playerController.js","cameraController.js","rotator.js"],"prefabs":["rotator.pref"],"templates":["environmentMaterial.temp"],"animations":[],"others":[]},"rawGameObjects":[{"id":"MTg2MWIxOTU=YmI0ODdmNjY=NjIxODk2YWM=NThjMDE2ZGY=","name":"directionalLight","sort":0,"className":"DirectionalLight","children":[]},{"id":"ZGY3ZGUzNzk=YzkyYTAzNjk=MWQ5ZWU4ZTQ=YmEwNjUzZTc=","name":"southWall","sort":null,"className":"Mesh","children":[]},{"id":"ZGJhMzQwN2I=YWI2YzI3MDY=M2U1ZmRjNjc=OWUzYzExMjU=","name":"northWall","sort":null,"className":"Mesh","children":[]},{"id":"MmJmODkzYTI=NjAxNmU0YTY=NzJiODk3MmM0YmI1YTQ=","name":"westWall","sort":null,"className":"Mesh","children":[]},{"id":"MTcwMzQ3YjM=Mzg5NzliZmI=ZDVmNmRiZTc=ZGQzOWUyZDk=","name":"ground","sort":1,"className":"Mesh","children":[]},{"id":"YjViZjNkNTE=ZDk3ZTQ4Mjc=NTgwYjM1ZjI=NGU2ZjNmM2Y=","name":"player","sort":2,"className":"Mesh","children":[]},{"id":"ODAxMTFiMmQ=OGEzNTZkMTE=MjkwYzA0MQ==ZWM0NDQ0ZDk=","name":"universalCamera","sort":3,"className":"UniversalCamera","children":[]},{"id":"YjIwNzUyYTM=YTllYmM1NTM=Y2U3OWYxMg==MDRmZGExNDk=","name":"eastWall","sort":4,"className":"Mesh","children":[]},{"id":"ZWYyZDYwZGM=NGFjN2NiZjQ=YWIxYWQyY2E=MzkwYWRlMQ==","name":"rotators","sort":7,"className":"Mesh","children":[{"id":"NDMwOTdkMDc=MmY3MWJhODk=NGU3NmI0OTY=Y2UzZWM2MzM=","name":"rotator1","sort":6,"className":"Mesh","children":[]},{"id":"M2E0NGUwNzY=OGUyZGUyZTM=ZTY4NGM5ZTE=NjJlYmQyZWM=","name":"rotator","sort":5,"className":"Mesh","children":[]},{"id":"NWViYTYyYmY=ZWVmZDNhOGQ=MGI0OWRjZjI=ZTdhMWViYzI=","name":"rotator2","sort":null,"className":"Mesh","children":[]},{"id":"ZjE0YjYzYjM=ZGU5NzJlY2M=ZmY3MGMxY2Y=MDY1YWYxNg==","name":"rotator3","sort":null,"className":"Mesh","children":[]},{"id":"ZjE1ZjAzN2E=MDdhMDQ2OTE=NmFkOTI4ZjQ=YTAzZDViYTc=","name":"rotator4","sort":null,"className":"Mesh","children":[]},{"id":"YzUzYTQwMDY=NjI5OGNhZWE=NzgzNGYzY2Q=ZWU2N2U4OTM=","name":"rotator5","sort":null,"className":"Mesh","children":[]},{"id":"NDYxZjE2MGQ=ZmFmYzliNjk=ZGJlYTIzMDg=OGQ3Y2Y1NjM=","name":"rotator6","sort":null,"className":"Mesh","children":[]},{"id":"ZmYwNjM0Mjk=NTdlMjIyMmI=NWU1MGM0MDU=OGZhZTNkN2Q=","name":"rotator7","sort":null,"className":"Mesh","children":[]},{"id":"NWMyMjRhM2U=OTcwN2QxOGE=NTY2MzQzODQ=MGQwYjg0YTI=","name":"rotator8","sort":null,"className":"Mesh","children":[]},{"id":"YWY0YjUyZjQ=Y2QzZjExY2I=ZTk0YWExZTc=NjE3OWI2MzU=","name":"rotator9","sort":null,"className":"Mesh","children":[]},{"id":"NGMxYjk3YzY=Y2E5ZTc0OGQ=OTQ3OWIxZDc=Y2EwOWMzMzQ=","name":"rotator10","sort":null,"className":"Mesh","children":[]},{"id":"M2JjZWEyYmU=NzUzOWIxZjk=YTU0ODJkNDQ=YTgwMzEyMTc=","name":"rotator11","sort":null,"className":"Mesh","children":[]}]}]}